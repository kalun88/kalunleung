---
import type { HTMLTag } from "astro/types";
import FormattedDate from "@/components/FormattedDate.astro";
import type { Post } from "@/lib/interfaces";
import { getPostContentByPostId, processFileBlocks } from "@/lib/notion/client";
import {
	extractTargetBlocks,
	getNavLink,
	getPostLink,
	setCurrentHeadings,
} from "@/lib/blog-helpers";
import NotionBlocks from "@/components/NotionBlocks.astro";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { MENU_PAGES_COLLECTION, BUILD_FOLDER_PATHS } from "@/constants";
import Icon from "@/components/Icon.astro";
import { buildHeadings, slugify } from "@/utils";
import fs from "fs/promises";
import path from "path";
import superjson from "superjson";

interface Props {
	post_full_preview: Post;
	shouldUseCache: boolean;
	postLastUpdatedBeforeLastBuild: boolean;
	as?: HTMLTag;
	withDesc?: boolean;
}

const {
	post_full_preview,
	shouldUseCache,
	postLastUpdatedBeforeLastBuild,
	as: Tag = "div",
	withDesc = false,
} = Astro.props;
const { blocks, referencesInPage } = await getPostContentByPostId(post_full_preview);

// --- Headings Cache Handling ---
let headings = null;
const headingsCacheDir = BUILD_FOLDER_PATHS["headingsCache"];
const headingsCacheFile = path.join(headingsCacheDir, `${post_full_preview.Slug}.json`);

let cachedHeadings = null;
if (postLastUpdatedBeforeLastBuild) {
	try {
		const headingsData = await fs.readFile(headingsCacheFile, "utf-8");
		cachedHeadings = superjson.parse(headingsData);
	} catch (e) {
		cachedHeadings = null;
	}
}

if (cachedHeadings) {
	headings = cachedHeadings;
} else {
	headings = buildHeadings(blocks);
	try {
		await fs.writeFile(headingsCacheFile, superjson.stringify(headings), "utf-8");
	} catch (e) {
		console.error("Error saving headings cache:", e);
	}
}

setCurrentHeadings(headings);

// --- HTML Cache Handling ---
let cachedHtml = "";
if (shouldUseCache) {
	const htmlCacheFile = path.join(
		BUILD_FOLDER_PATHS["blocksHtmlCache"],
		`${post_full_preview.Slug}.html`,
	);
	try {
		cachedHtml = await fs.readFile(htmlCacheFile, "utf-8");
	} catch (e) {
		// Cache file doesn't exist; fallback to fresh rendering.
		cachedHtml = "";
	}
}

const fileAtacchedBlocks = extractTargetBlocks(["image", "video", "file", "audio"], blocks).filter(
	(block) => {
		if (!block) return false;
		const imageOrVideoOrAudioOrFile = block.NImage || block.File || block.Video || block.NAudio;
		return (
			imageOrVideoOrAudioOrFile &&
			imageOrVideoOrAudioOrFile.File &&
			imageOrVideoOrAudioOrFile.File.Url
		);
	},
);
await processFileBlocks(fileAtacchedBlocks);

const postLink = getPostLink(
	post_full_preview.Slug,
	post_full_preview.Collection === MENU_PAGES_COLLECTION,
);
---

<article class="full-content-feed-item group relative">
	<div class="flex flex-col">
		<!-- Header Section -->
		<header class="mb-2">
			<!-- Date and metadata -->
			<div class="mb-1 flex items-center justify-between">
				<div class="flex items-center gap-2">
					<FormattedDate date={new Date(post_full_preview.Date + 'T00:00:00')} class="text-xs text-gray-500 font-normal" />
					{
						post_full_preview.Pinned && (
							<Icon
								class="h-3 w-3 text-red-500"
								name={"pin"}
								aria-label="Pinned Post"
								focusable="false"
							/>
						)
					}
				</div>
				{/* Tags */}
				{post_full_preview.Tags && post_full_preview.Tags.length > 0 && (
					<div class="flex flex-wrap gap-1">
						{post_full_preview.Tags.slice(0, 3).map((tag) => (
							<a
								class={`inline-flex items-center px-1.5 py-0.5 rounded-full text-[10px] font-medium transition-colors hover:opacity-80 ${getNotionColorToTailwindColor(
									tag.color + "-background",
									true,
								)}`}
								aria-label={`View more blogs with the tag ${tag.name}`}
								href={getNavLink("/tags/" + slugify(tag.name) + "/")}
							>
								{tag.name}
							</a>
						))}
						{post_full_preview.Tags.length > 3 && (
							<span class="text-[10px] text-gray-500 ml-1">+{post_full_preview.Tags.length - 3} more</span>
						)}
					</div>
				)}
			</div>
			
			<!-- Title -->
			<Tag class="text-lg lg:text-xl font-bold text-slate-900 group-hover:text-blue-600 transition-colors duration-200 mb-2" id={`post-title-${post_full_preview.PageId}`}>
				<a href={postLink} class="hover:underline">
					{post_full_preview.Title}
				</a>
			</Tag>

			<!-- Excerpt if available -->
			{withDesc && post_full_preview.Excerpt && (
				<div class="mb-2 text-slate-600 text-xs leading-relaxed">
					{post_full_preview.Excerpt}
				</div>
			)}
		</header>
		
		<!-- Full Content Section -->
		<div class="max-w-none text-sm">
			{
				shouldUseCache && cachedHtml ? (
					<section class="post-body" data-html-type="cached" set:html={cachedHtml} />
				) : (
					<section class="post-body" data-html-type="new">
						<NotionBlocks blocks={blocks} />
					</section>
				)
			}
		</div>
	</div>
</article>
