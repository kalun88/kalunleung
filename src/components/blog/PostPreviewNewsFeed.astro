---
import type { Post } from "@/lib/interfaces";
import { extractTargetBlocks, filePath, getPostLink, getNavLink } from "@/lib/blog-helpers";
import { MENU_PAGES_COLLECTION } from "@/constants";
import NotionBlocks from "@/components/NotionBlocks.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import Icon from "@/components/Icon.astro";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { slugify } from "@/utils";

interface Props {
	post: Post;
	enableBorder?: boolean;
	isLast?: boolean;
}

const { post, enableBorder = true, isLast = false } = Astro.props;

const posttags = post.Tags ?? [];

// Use the same date handling as PostPreviewMedium
const postDate = post.Date ? new Date(post.Date + 'T00:00:00') : null;

// Use the same link generation as PostPreviewMedium
const postLink = getPostLink(post.Slug, post.Collection === MENU_PAGES_COLLECTION);

// Use Cover image from post object (already fetched, no extra API call needed)
// For 'file' type covers: in dev mode use direct Notion URL, in build use processed local images
// For 'external' type covers: always use direct URL (external links don't expire)
let coverImageUrl = "";
if (post.Cover && post.Cover.Url) {
	if (post.Cover.Type === 'file') {
		// In dev mode, use direct Notion URL since images aren't processed yet
		// In production build, use filePath() to serve optimized local images
		if (import.meta.env.DEV) {
			coverImageUrl = post.Cover.Url; // Direct Notion URL for dev
		} else {
			try {
				coverImageUrl = filePath(new URL(post.Cover.Url));
			} catch (err) {
				console.log(`Cover image URL error for ${post.Title}:`, err);
				coverImageUrl = post.Cover.Url; // Fallback to direct URL
			}
		}
	} else {
		coverImageUrl = post.Cover.Url; // External URL - use directly
	}
}

const borderClasses = enableBorder && !isLast ? "border-b border-slate-200 pb-2 mb-2" : "";
---

<!-- Single-line calendar/list format: Date | Title | Excerpt | Tags -->
<article class={`calendar-entry group relative ${borderClasses} py-2 hover:bg-gray-50 transition-colors duration-200 w-full`}>
	<div class="flex items-center gap-2 px-2">
		<!-- Date (fixed width) -->
		<div class="flex-shrink-0 w-32">
			{postDate && (
				<FormattedDate date={postDate} class="text-sm text-gray-500 font-normal hover:text-blue-600 transition-colors whitespace-nowrap" />
			)}
		</div>
		
				<!-- Title (super wide for news feed, but allows excerpt to show) -->
				<div class="flex-shrink w-[min(600px,60vw)] min-w-[180px]">
					<h3 class="text-sm font-semibold text-slate-900 truncate">
						{post.Title}
					</h3>
				</div>
		
		<!-- Excerpt (flexible width) -->
		<div class="flex-grow min-w-0">
			{post.Excerpt && (
				<p class="text-sm text-slate-600 italic truncate">
					{post.Excerpt}
				</p>
			)}
		</div>
		
		<!-- Tags (right aligned) -->
		<div class="flex-shrink-0">
			{posttags.length > 0 && (
				<div class="flex flex-wrap gap-2 justify-end font-mono text-xs">
					{posttags.slice(0, 2).map((tag) => (
						<a
							class="inline-flex items-center transition-opacity hover:opacity-80"
							aria-label={`View more entries with the tag ${tag.name}`}
							href={getNavLink("/tags/" + slugify(tag.name) + "/")}
						>
							[{tag.name}]
						</a>
					))}
					{posttags.length > 2 && (
						<span class="text-xs text-slate-500">+{posttags.length - 2}</span>
					)}
				</div>
			)}
		</div>
	</div>
</article>

<style>
.line-clamp-2 {
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

.news-feed-item:hover .prose {
	color: rgb(71 85 105);
}
</style>