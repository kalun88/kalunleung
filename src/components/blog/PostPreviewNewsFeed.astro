---
import type { Post } from "@/lib/interfaces";
import { extractTargetBlocks, filePath, getPostLink, getNavLink } from "@/lib/blog-helpers";
import { MENU_PAGES_COLLECTION } from "@/constants";
import NotionBlocks from "@/components/NotionBlocks.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import Icon from "@/components/Icon.astro";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { slugify } from "@/utils";
import { getPostContentByPostId } from "@/lib/notion/client";

interface Props {
	post: Post;
	enableBorder?: boolean;
	isLast?: boolean;
}

const { post, enableBorder = true, isLast = false } = Astro.props;

const posttags = post.Tags ?? [];

// Use the same link generation as PostPreviewMedium
const postLink = getPostLink(post.Slug, post.Collection === MENU_PAGES_COLLECTION);

// Use FeaturedImages array (for consistency, though not displayed in this layout)
// Convert Notion URLs to local cached paths
const images = post.FeaturedImages && post.FeaturedImages.length > 0
	? post.FeaturedImages.map(img => {
		// For external URLs, use as-is
		if (img.Type === 'external') {
			return img.Url;
		}
		// For Notion uploaded files, OptimizedUrl is already a stable path like /notion/{pageId}/image.webp
		// If OptimizedUrl starts with /, it's already a path, otherwise convert from Notion URL
		const optimizedUrl = img.OptimizedUrl || img.Url;
		if (optimizedUrl.startsWith('/')) {
			return optimizedUrl;
		}
		return filePath(new URL(optimizedUrl));
	})
	: [];

const borderClasses = enableBorder && !isLast ? "border-b border-slate-200 pb-2 mb-2" : "";

// Fetch the full page content for expansion
const { blocks } = await getPostContentByPostId(post);
---

<!-- Single-line calendar/list format: Date | Title | Excerpt | Tags -->
<article class={`calendar-entry group relative ${borderClasses} py-2 transition-all duration-200 w-full overflow-hidden news-feed-item`}>
	<!-- Main row (always visible) -->
	<div class="flex flex-col sm:flex-row sm:items-baseline gap-1 sm:gap-2 px-2 hover:bg-gray-50 dark:hover:bg-slate-800 transition-colors duration-200">
		<!-- Date (fixed width on desktop, full width on mobile) -->
		<div class="flex-shrink-0 w-full sm:w-32 flex items-start sm:items-center">
			<FormattedDate date={post.Date} class="font-mono text-sm text-gray-500 dark:text-gray-400 leading-tight hover:text-blue-600 dark:hover:text-blue-400 transition-colors whitespace-nowrap" />
		</div>

		<!-- Title (super wide for news feed, but allows excerpt to show) -->
		<div class="flex-shrink w-full sm:w-[min(600px,60vw)] sm:min-w-[180px] flex flex-col justify-center">
			<h3 class="text-sm font-semibold text-slate-900 dark:text-slate-100 truncate leading-tight">
				{post.Title}
			</h3>
			{post.Venue && (
				<div class="text-xs text-slate-600 dark:text-slate-400 mt-0 leading-tight">
					{post.Venue}
				</div>
			)}
		</div>

		<!-- Excerpt (flexible width, hidden on mobile) -->
		<div class="flex-grow min-w-0 hidden sm:block">
			{post.Excerpt && (
				<p class="text-sm text-slate-600 dark:text-slate-400 italic truncate">
					{post.Excerpt}
				</p>
			)}
		</div>

		<!-- Tags (right aligned, wrapped on mobile) -->
		<div class="flex-shrink-0 w-full sm:w-auto">
			{posttags.length > 0 && (
				<div class="flex flex-wrap gap-2 justify-start sm:justify-end font-mono text-xs">
					{posttags.slice(0, 2).map((tag) => (
						<a
							class="inline-flex items-center transition-opacity hover:opacity-80"
							aria-label={`View more entries with the tag ${tag.name}`}
							href={getNavLink("/tags/" + slugify(tag.name) + "/")}
						>
							[{tag.name}]
						</a>
					))}
					{posttags.length > 2 && (
						<span class="text-xs text-slate-500 dark:text-slate-400">+{posttags.length - 2}</span>
					)}
				</div>
			)}
		</div>
	</div>

	<!-- Expandable content (shown on hover, only if blocks exist) -->
	{blocks && blocks.length > 0 && (
		<div class="expanded-content max-h-0 transition-all duration-300 ease-in-out opacity-0 overflow-hidden">
			<div class="px-2 py-4 bg-gray-50 border-t border-gray-200 mt-2">
				<div class="prose prose-sm max-w-none text-slate-800">
					<NotionBlocks blocks={blocks} isRoot={true} />
				</div>
			</div>
		</div>
	)}
</article>

<style>
.line-clamp-2 {
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

.news-feed-item:hover .prose {
	color: rgb(71 85 105);
}

/* Hover expansion styles */
.news-feed-item:hover .expanded-content {
	max-height: 2000px; /* Increased for full page content */
	opacity: 1;
}

.expanded-content {
	transition: max-height 0.4s ease-in-out, opacity 0.3s ease-in-out;
}

/* Style the expanded content */
.expanded-content .prose {
	font-size: 0.875rem;
	line-height: 1.5;
}

.expanded-content .prose a {
	color: rgb(37 99 235);
	text-decoration: underline;
}

.expanded-content .prose a:hover {
	color: rgb(29 78 216);
}

/* Ensure lists and other elements render nicely in the expanded view */
.expanded-content .prose ul,
.expanded-content .prose ol {
	margin-top: 0.5rem;
	margin-bottom: 0.5rem;
}

.expanded-content .prose p {
	margin-top: 0.5rem;
	margin-bottom: 0.5rem;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
	const newsItems = document.querySelectorAll('.news-feed-item');

	newsItems.forEach(item => {
		const expandedContent = item.querySelector('.expanded-content');
		if (!expandedContent) return;

		// Mouse enter: expand
		item.addEventListener('mouseenter', () => {
			expandedContent.style.maxHeight = expandedContent.scrollHeight + 'px';
			expandedContent.style.opacity = '1';
		});

		// Mouse leave: collapse
		item.addEventListener('mouseleave', () => {
			expandedContent.style.maxHeight = '0';
			expandedContent.style.opacity = '0';
		});
	});
});
</script>