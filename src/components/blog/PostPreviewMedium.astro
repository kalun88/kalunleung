---
import type { HTMLTag } from "astro/types";
import FormattedDate from "@/components/FormattedDate.astro";
import type { Post } from "@/lib/interfaces";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { getNavLink, getPostLink, filePath } from "@/lib/blog-helpers";
import { MENU_PAGES_COLLECTION } from "@/constants";
import Icon from "@/components/Icon.astro";
import { slugify } from "@/utils";

interface Props {
	post: Post;
	as?: HTMLTag;
	showPin?: boolean;
}

const { post, as: Tag = "div", showPin = true } = Astro.props;
const postLink = getPostLink(post.Slug, post.Collection === MENU_PAGES_COLLECTION);

// Use Cover image from post object (already fetched, no extra API call needed)
// For 'file' type covers: in dev mode use direct Notion URL, in build use processed local images
// For 'external' type covers: always use direct URL (external links don't expire)
let coverImageUrl = "";
if (post.Cover && post.Cover.Url) {
	if (post.Cover.Type === 'file') {
		// In dev mode (import.meta.env.DEV), use direct Notion URL since images aren't processed yet
		// In production build, use filePath() to serve optimized local images
		if (import.meta.env.DEV) {
			coverImageUrl = post.Cover.Url; // Direct Notion URL for dev
		} else {
			try {
				coverImageUrl = filePath(new URL(post.Cover.Url));
			} catch (err) {
				console.log(`Cover image URL error for ${post.Title}:`, err);
				coverImageUrl = post.Cover.Url; // Fallback to direct URL
			}
		}
	} else {
		coverImageUrl = post.Cover.Url; // External URL - use directly
	}
}
---

<!-- manual-edit: Magazine-style card with consistent height -->
  <article class="group relative cursor-pointer transition-all duration-300 ease-in-out hover:-translate-y-1 motion-safe:hover:-translate-y-1 flex flex-col h-full">
	<!-- Main clickable overlay covering entire card -->
	<a href={postLink} class="absolute inset-0 z-10 cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-2 rounded-lg" data-astro-prefetch aria-label={`Read article: ${post.Title}`}></a>
	
	{/* Featured image section */}
	<div class="mb-4">
		<div class="aspect-[4/3] overflow-hidden bg-gray-100">
			{coverImageUrl ? (
				<img
					src={coverImageUrl}
					alt={`Cover image for ${post.Title}`}
					class="portfolio-image h-full w-full object-cover"
					style="opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1);"
					loading="eager"
					decoding="async"
					onload="this.style.opacity='1'"
					onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'"
				/>
			) : null}
			<!-- Always include fallback div, shown when image fails -->
			<div class="flex h-full w-full items-center justify-center bg-gray-100" style={coverImageUrl ? "display: none;" : ""}>
				<Icon
					class="h-16 w-16 text-gray-300"
					name="image"
					aria-hidden="true"
				/>
			</div>
		</div>
	</div>
	
	<!-- Content section with flex-grow to fill remaining space -->
	<div class="flex-grow flex flex-col">
		<!-- Line 1: Date and Tag (right-justified) -->
		<div class="mb-2 flex items-center justify-between">
			<FormattedDate date={new Date(post.Date + 'T00:00:00')} class="text-sm text-gray-500 font-normal" />
			{/* Single tag on right - mono font with brackets */}
			{post.Tags && post.Tags.length > 0 && (
				<a
					class="inline-flex items-center text-xs font-mono transition-colors hover:opacity-80 relative z-20"
					aria-label={`View more blogs with the tag ${post.Tags[0].name}`}
					href={getNavLink("/tags/" + slugify(post.Tags[0].name) + "/")}
					style="pointer-events: auto;"
				>
					[{post.Tags[0].name}]
				</a>
			)}
		</div>

		<!-- Line 2: Pin and Title -->
		<div class="mb-4 flex items-start gap-2">
			{
				showPin && post.Pinned && (
					<Icon
						class="h-4 w-4 text-accent flex-shrink-0 mt-1"
						name={"pin"}
						aria-label="Pinned Post"
						focusable="false"
					/>
				)
			}
			<Tag class="text-xl font-semibold text-gray-900 leading-tight line-clamp-2 group-hover:text-accent transition-colors flex-1" id={`post-title-${post.PageId}`}>
				{post.Title}
			</Tag>
		</div>
		
		<!-- Line 3: Excerpt with flex-grow to fill remaining space and consistent height -->
		<div class="flex-grow flex items-end">
			{post.Excerpt && (
				<p class="text-gray-600 leading-relaxed text-sm line-clamp-3 italic w-full">
					{post.Excerpt}
				</p>
			)}
		</div>
	</div>
</article>

<script>
	// Add smooth hover zoom effect to portfolio images
	document.addEventListener('DOMContentLoaded', function() {
		const articles = document.querySelectorAll('article');
		
		articles.forEach(article => {
			const image = article.querySelector('.portfolio-image');
			if (image) {
				article.addEventListener('mouseenter', () => {
					image.style.transform = 'scale(1.05)';
				});
				
				article.addEventListener('mouseleave', () => {
					image.style.transform = 'scale(1)';
				});
			}
		});
	});
</script>