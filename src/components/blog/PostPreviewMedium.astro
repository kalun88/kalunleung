---
import type { HTMLTag } from "astro/types";
import FormattedDate from "@/components/FormattedDate.astro";
import type { Post } from "@/lib/interfaces";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { getNavLink, getPostLink, filePath } from "@/lib/blog-helpers";
import { MENU_PAGES_COLLECTION } from "@/constants";
import Icon from "@/components/Icon.astro";
import { slugify } from "@/utils";

interface Props {
	post: Post;
	as?: HTMLTag;
	showPin?: boolean;
}

const { post, as: Tag = "div", showPin = true } = Astro.props;
const postLink = getPostLink(post.Slug, post.Collection === MENU_PAGES_COLLECTION);

// Use FeaturedImages array for artistic multi-image layouts
// Convert Notion URLs to local cached paths
const images = post.FeaturedImages && post.FeaturedImages.length > 0
	? post.FeaturedImages.map(img => {
		// For external URLs, use as-is
		if (img.Type === 'external') {
			return img.Url;
		}
		// For Notion uploaded files, OptimizedUrl is already a stable path like /notion/{pageId}/image.webp
		// If OptimizedUrl starts with /, it's already a path, otherwise convert from Notion URL
		const optimizedUrl = img.OptimizedUrl || img.Url;
		if (optimizedUrl.startsWith('/')) {
			return optimizedUrl;
		}
		return filePath(new URL(optimizedUrl));
	})
	: [];

// Create artistic layout based on number of images
const hasMultipleImages = images.length >= 2;

// Seeded random for consistent but varied layouts per post
const seed = post.PageId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
const seededRandom = (min: number, max: number, offset: number = 0) => {
	const x = Math.sin(seed + offset) * 10000;
	return min + (x - Math.floor(x)) * (max - min);
};

// Generate layout parameters for 2 images
const img1Top = seededRandom(0, 15, 1);
const img1Left = seededRandom(0, 15, 2);
const img1Width = seededRandom(55, 65, 3);
const img1Height = seededRandom(55, 65, 4);
const img1Rotation = seededRandom(-3, -1, 5);
const img1ZIndex = seededRandom(0, 1, 6) > 0.5 ? 2 : 1;

const img2Bottom = seededRandom(0, 15, 7);
const img2Right = seededRandom(0, 15, 8);
const img2Width = seededRandom(40, 50, 9);
const img2Height = seededRandom(40, 50, 10);
const img2Rotation = seededRandom(1, 3, 11);
const img2ZIndex = img1ZIndex === 2 ? 1 : 2;

// Generate layout parameters for 3+ images (grid-based collage)
const img3Top = seededRandom(35, 50, 12);
const img3Left = seededRandom(5, 20, 13);
const img3Width = seededRandom(30, 40, 14);
const img3Height = seededRandom(30, 40, 15);
const img3Rotation = seededRandom(-2, 2, 16);
const img3ZIndex = 3;
---

<!-- manual-edit: Magazine-style card with consistent height and responsive design -->
  <article class="group relative cursor-pointer transition-all duration-300 ease-in-out hover:-translate-y-1 motion-safe:hover:-translate-y-1 flex flex-col h-full overflow-hidden">
	<!-- Main clickable overlay covering entire card -->
	<a href={postLink} class="absolute inset-0 z-10 cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-2" data-astro-prefetch aria-label={`Read article: ${post.Title}`}></a>

	{/* Featured image section - artistic multi-image layout with responsive adjustments */}
	<div class="mb-4 relative">
		{images.length > 0 ? (
			images.length >= 3 ? (
				<!-- Three or more images - artistic collage with 3 images -->
				<div class="aspect-[4/3] overflow-hidden relative bg-transparent">
					{/* First image - larger, top-left dominant */}
					<div class="absolute" style={`
						top: ${img1Top}%;
						left: ${img1Left}%;
						width: ${img1Width}%;
						height: ${img1Height}%;
						z-index: ${img1ZIndex};
					`}>
						<img
							src={images[0]}
							alt={`Image 1 for ${post.Title}`}
							class="portfolio-image h-full w-full object-cover shadow-md"
							style={`opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1) rotate(${img1Rotation}deg);`}
							loading="eager"
							decoding="async"
							onload="this.style.opacity='1'"
						/>
					</div>

					{/* Second image - medium, bottom-right */}
					<div class="absolute" style={`
						bottom: ${img2Bottom}%;
						right: ${img2Right}%;
						width: ${img2Width}%;
						height: ${img2Height}%;
						z-index: ${img2ZIndex};
					`}>
						<img
							src={images[1]}
							alt={`Image 2 for ${post.Title}`}
							class="portfolio-image h-full w-full object-cover shadow-md"
							style={`opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1) rotate(${img2Rotation}deg);`}
							loading="eager"
							decoding="async"
							onload="this.style.opacity='1'"
						/>
					</div>

					{/* Third image - smaller accent piece */}
					<div class="absolute" style={`
						top: ${img3Top}%;
						left: ${img3Left}%;
						width: ${img3Width}%;
						height: ${img3Height}%;
						z-index: ${img3ZIndex};
					`}>
						<img
							src={images[2]}
							alt={`Image 3 for ${post.Title}`}
							class="portfolio-image h-full w-full object-cover shadow-md"
							style={`opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1) rotate(${img3Rotation}deg);`}
							loading="eager"
							decoding="async"
							onload="this.style.opacity='1'"
						/>
					</div>
				</div>
			) : images.length === 2 ? (
				<!-- Two images - artistic dual layout -->
				<div class="aspect-[4/3] overflow-hidden relative bg-transparent">
					{/* First image - larger, varied position */}
					<div class="absolute" style={`
						top: ${img1Top}%;
						left: ${img1Left}%;
						width: ${img1Width}%;
						height: ${img1Height}%;
						z-index: ${img1ZIndex};
					`}>
						<img
							src={images[0]}
							alt={`Image 1 for ${post.Title}`}
							class="portfolio-image h-full w-full object-cover"
							style={`opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1) rotate(${img1Rotation}deg);`}
							loading="eager"
							decoding="async"
							onload="this.style.opacity='1'"
						/>
					</div>

					{/* Second image - smaller, offset position */}
					<div class="absolute" style={`
						bottom: ${img2Bottom}%;
						right: ${img2Right}%;
						width: ${img2Width}%;
						height: ${img2Height}%;
						z-index: ${img2ZIndex};
					`}>
						<img
							src={images[1]}
							alt={`Image 2 for ${post.Title}`}
							class="portfolio-image h-full w-full object-cover"
							style={`opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1) rotate(${img2Rotation}deg);`}
							loading="eager"
							decoding="async"
							onload="this.style.opacity='1'"
						/>
					</div>
				</div>
			) : (
				<!-- Single image layout -->
				<div class="aspect-[4/3] overflow-hidden bg-gray-100">
					<img
						src={images[0]}
						alt={`Cover image for ${post.Title}`}
						class="portfolio-image h-full w-full object-cover"
						style="opacity: 0; transition: opacity 0.3s ease, transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: scale(1);"
						loading="eager"
						decoding="async"
						onload="this.style.opacity='1'"
					/>
				</div>
			)
		) : (
			<!-- Fallback when no images -->
			<div class="aspect-[4/3] flex h-full w-full items-center justify-center bg-gray-100 dark:bg-gray-800">
				<Icon
					class="h-16 w-16 text-gray-300 dark:text-gray-600"
					name="image"
					aria-hidden="true"
				/>
			</div>
		)}
	</div>
	
	<!-- Content section with flex-grow to fill remaining space -->
	<div class="flex-grow flex flex-col">
		<!-- Line 1: Date and Tag (right-justified) -->
		<div class="mb-2 flex items-center justify-between">
			<FormattedDate date={post.Date} class="font-mono text-sm text-gray-500 dark:text-gray-400" />
			{/* Single tag on right - mono font with brackets */}
			{post.Tags && post.Tags.length > 0 && (
				<a
					class="inline-flex items-center text-xs font-mono transition-colors hover:opacity-80 relative z-20"
					aria-label={`View more blogs with the tag ${post.Tags[0].name}`}
					href={getNavLink("/tags/" + slugify(post.Tags[0].name) + "/")}
					style="pointer-events: auto;"
				>
					[{post.Tags[0].name}]
				</a>
			)}
		</div>

		<!-- Line 2: Pin and Title -->
		<div class="mb-4 flex items-start gap-2">
			{
				showPin && post.Pinned && (
					<Icon
						class="h-4 w-4 text-accent flex-shrink-0 mt-1"
						name={"pin"}
						aria-label="Pinned Post"
						focusable="false"
					/>
				)
			}
			<Tag class="text-xl font-semibold text-slate-900 dark:text-slate-100 leading-tight line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors flex-1" id={`post-title-${post.PageId}`}>
				{post.Title}
			</Tag>
		</div>
		
		<!-- Line 3: Excerpt with flex-grow to fill remaining space and consistent height -->
		<div class="flex-grow flex items-end">
			{post.Excerpt && (
				<p class="text-gray-600 leading-relaxed text-sm line-clamp-3 italic w-full">
					{post.Excerpt}
				</p>
			)}
		</div>
	</div>
</article>

<style>
	/* Enhanced transitions for portfolio images with hardware acceleration */
	.portfolio-image {
		will-change: transform, opacity;
		backface-visibility: hidden;
		-webkit-backface-visibility: hidden;
		transform-style: preserve-3d;
	}

	/* Smooth shadow transitions for multi-image layouts */
	.shadow-md {
		transition: box-shadow 0.3s ease;
	}

	/* Optimize mobile performance */
	@media (max-width: 768px) {
		.portfolio-image {
			will-change: opacity;
		}
	}

	/* Reduce motion for accessibility */
	@media (prefers-reduced-motion: reduce) {
		.portfolio-image,
		article {
			transition: none !important;
			transform: none !important;
		}
	}
</style>

<script>
	// Add smooth hover zoom effect to all portfolio images in multi-image layouts
	document.addEventListener('DOMContentLoaded', function() {
		const articles = document.querySelectorAll('article');
		const isMobile = window.matchMedia('(max-width: 768px)').matches;
		const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

		// Skip hover effects on mobile or if reduced motion is preferred
		if (isMobile || prefersReducedMotion) return;

		articles.forEach(article => {
			const images = article.querySelectorAll('.portfolio-image');

			if (images.length > 0) {
				article.addEventListener('mouseenter', () => {
					images.forEach((img, index) => {
						// Get the current rotation from inline style
						const styleAttr = img.getAttribute('style') || '';
						const rotateMatch = styleAttr.match(/rotate\(([-\d.]+)deg\)/);
						const currentRotation = rotateMatch ? rotateMatch[1] : '0';

						// Apply subtle scale with preserved rotation using requestAnimationFrame for smooth performance
						requestAnimationFrame(() => {
							img.style.transform = `scale(1.05) rotate(${currentRotation}deg)`;
						});

						// Add slight stagger effect for multi-image layouts
						if (images.length > 1) {
							setTimeout(() => {
								img.style.opacity = '1';
							}, index * 50);
						}
					});
				});

				article.addEventListener('mouseleave', () => {
					images.forEach(img => {
						// Get the current rotation from inline style
						const styleAttr = img.getAttribute('style') || '';
						const rotateMatch = styleAttr.match(/rotate\(([-\d.]+)deg\)/);
						const currentRotation = rotateMatch ? rotateMatch[1] : '0';

						// Return to original scale with preserved rotation
						requestAnimationFrame(() => {
							img.style.transform = `scale(1) rotate(${currentRotation}deg)`;
						});
					});
				});
			}
		});
	});
</script>