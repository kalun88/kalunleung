---
import * as interfaces from "@/lib/interfaces.ts";
import NotionBlocks from "@/components/NotionBlocks.astro";
import { TWO_COLUMN_LAYOUT, THREE_COLUMN_LAYOUT, FOUR_COLUMN_LAYOUT } from "@/constants";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;

// Determine column layout type for configurable sizing
const columnCount = block.ColumnList.Columns.length;
const isTwoColumn = columnCount === 2;
const isThreeColumn = columnCount === 3;
const isFourColumn = columnCount === 4;
---

<div class="notion-column-list mx-auto my-4 flex flex-col md:flex-row w-full max-w-full gap-4 md:gap-x-8 md:flex-nowrap">
	{
		block.ColumnList.Columns.map((column: interfaces.Column, index: number) => {
			let columnClasses = "notion-column w-full max-w-full min-w-0";
			let desktopWidth = "";
			let inlineStyle = "";

			if (isTwoColumn) {
				// Use configurable percentage widths for 2-column layouts (only on md+)
				const widthKey = `column-${index + 1}-width` as keyof typeof TWO_COLUMN_LAYOUT;
				desktopWidth = TWO_COLUMN_LAYOUT[widthKey];
				columnClasses += " md:flex-shrink-0 md:flex-grow-0";
				inlineStyle = `--desktop-width: ${desktopWidth};`;
			} else if (isThreeColumn) {
				// Use configurable percentage widths for 3-column layouts (only on md+)
				const widthKey = `column-${index + 1}-width` as keyof typeof THREE_COLUMN_LAYOUT;
				desktopWidth = THREE_COLUMN_LAYOUT[widthKey];
				columnClasses += " md:flex-shrink-0 md:flex-grow-0";
				inlineStyle = `--desktop-width: ${desktopWidth};`;
			} else if (isFourColumn) {
				// Use configurable percentage widths for 4-column layouts (only on md+)
				const widthKey = `column-${index + 1}-width` as keyof typeof FOUR_COLUMN_LAYOUT;
				desktopWidth = FOUR_COLUMN_LAYOUT[widthKey];
				columnClasses += " md:flex-shrink-0 md:flex-grow-0";
				inlineStyle = `--desktop-width: ${desktopWidth};`;
			} else {
				// 5+ column layouts: on mobile full width, on desktop equal distribution
				columnClasses += " md:flex-1 md:basis-44";
			}

			return (
				<div class={columnClasses} style={inlineStyle}>
					<NotionBlocks blocks={column.Children} renderChildren={renderChildren} setId={setId} />
				</div>
			);
		})
	}
</div>

<style>
	/* Mobile-first: columns stack vertically by default */
	.notion-column {
		width: 100%;
	}

	/* Desktop: apply custom widths via CSS variable set in inline style */
	@media (min-width: 768px) {
		.notion-column.md\:flex-shrink-0 {
			width: var(--desktop-width, 33.33%);
		}
	}
</style>
