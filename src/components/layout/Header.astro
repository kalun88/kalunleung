---
import Search from "@/components/Search.astro";
import { getMenu } from "@/utils";
import { siteInfo } from "@/site.config";
import { filePath, getNavLink } from "@/lib/blog-helpers";
import Icon from "@/components/Icon.astro";
import ThemeIcon from "@/components/ThemeIcon.astro";

const menuLinks = await getMenu();

const url = new URL(Astro.request.url);

let customIconURL: string = "";
if (siteInfo.logo && siteInfo.logo.Type === "file") {
	try {
		customIconURL = filePath(new URL(siteInfo.logo.Url));
	} catch (err) {
		console.log("Invalid DB custom icon URL");
	}
}

const rss_path = getNavLink("/rss.xml");
---

<header
	id="main-header"
	class="group relative mb-12 flex w-full items-center justify-between lg:w-[125%]"
>
	<div class="flex sm:flex-col">
		<a
			href={getNavLink("/")}
			class="inline-flex items-center grayscale hover:filter-none focus-visible:filter-none sm:relative sm:inline-block forced-colors:grayscale-0 forced-colors:text-LinkText"
			aria-current={url.pathname === "/" ? "page" : false}
		>
			{
				siteInfo.logo && siteInfo.logo.Type === "emoji" ? (
					<>
						<span class="me-4 h-12 w-12 sm:absolute sm:start-[-5.5rem] sm:me-0 sm:h-20 sm:w-20 text-2xl sm:text-4xl flex items-center justify-center">
							{siteInfo.logo.Emoji}
						</span>
						<span class="text-2xl font-bold sm:text-4xl">{siteInfo.title}</span>
					</>
				) : siteInfo.logo && siteInfo.logo.Type === "external" ? (
					<>
						<img
							class="me-4 h-12 w-12 object-contain sm:absolute sm:start-[-5.5rem] sm:me-0 sm:h-20 sm:w-20"
							loading="eager"
							src={siteInfo.logo.Url}
							alt="Site header image"
						/>
						<span class="text-2xl font-bold sm:text-4xl">{siteInfo.title}</span>
					</>
				) : siteInfo.logo && siteInfo.logo.Type === "file" && customIconURL ? (
					<>
						<img
							loading="eager"
							src={customIconURL}
							class="me-4 h-12 w-12 object-contain sm:absolute sm:start-[-5.5rem] sm:me-0 sm:h-20 sm:w-20"
							alt="Site header image"
						/>
						<span class="text-2xl font-bold sm:text-4xl">{siteInfo.title}</span>
					</>
				) : (
					<span class="text-2xl font-bold sm:text-4xl">{siteInfo.title}</span>
				)
			}
		</a>
		<nav
			id="navigation-menu"
			class="md bg-bgColor/90 text-accent absolute -inset-x-4 top-16 hidden flex-col items-end rounded-md py-3 text-lg shadow-sm backdrop-blur-sm group-[.menu-open]:z-50 group-[.menu-open]:flex sm:static sm:z-auto sm:-ms-4 sm:mt-2 sm:flex sm:flex-row sm:items-center sm:rounded-none sm:py-0 sm:text-base sm:shadow-none sm:backdrop-blur-none lg:text-lg print:hidden"
			aria-label="Main menu"
		>
			{
				menuLinks.map((link) => (
					<a
						href={link.path}
						class="w-full px-5 py-5 text-right underline-offset-4 sm:w-auto sm:py-1 sm:text-left whitespace-pre-line focus-visible:underline focus-visible:decoration-accent motion-safe:transition-all contrast-more:underline-offset-8 forced-colors:text-LinkText sm:hover:underline sm:hover:decoration-accent-2/40 sm:hover:decoration-wavy pointer-coarse:py-7"
						aria-current={url.pathname === link.path ? "page" : false}
						target={link.isExternal ? "_blank" : undefined}
						rel={link.isExternal ? "noopener noreferrer" : undefined}
						onclick={link.isExternal ? `window.open('${link.path}', 'contact-form', 'width=600,height=1100,scrollbars=yes,resizable=yes'); return false;` : undefined}
						data-astro-prefetch={link.isExternal ? undefined : true}
					>
						{link.title}
					</a>
				))
			}
		</nav>
	</div>
	<div class="flex flex-row print:hidden">
		<!-- manual-edit: Hidden RSS button but keeping functionality intact -->
		<div
			class="hover:text-accent hover:ring-accent-400 h-10 w-10 cursor-pointer items-center justify-center rounded-md p-1.5 hover:ring-2 hidden"
		>
			<a href={rss_path}
				><Icon name={"rss"} class="hover:text-accent h-7 w-7" aria-label="Open RSS Link" /></a
			>
		</div>
		<!-- manual-edit: Hidden search button but keeping Search component intact -->
		<div class="hidden">
			<Search />
		</div>
		<!-- manual-edit: Hidden theme toggle button to force light mode -->
		<div class="hidden">
			<ThemeIcon />
		</div>
		<mobile-button class="flex items-center">
			<button
				id="toggle-navigation-menu"
				class="group relative ms-4 h-7 w-7 cursor-pointer sm:invisible sm:hidden"
				type="button"
				aria-label="Open main menu"
				aria-expanded="false"
				aria-haspopup="menu"
			>
				<Icon
					name={"menu"}
					class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0"
					aria-hidden="true"
					focusable="false"
				/>

				<Icon
					name={"close"}
					class="text-accent absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100"
					aria-hidden="true"
					focusable="false"
				/>
			</button>
		</mobile-button>
	</div>
</header>

<script>
	class MobileNavBtn extends HTMLElement {
		constructor() {
			super();

			const mobileButtonEl = document.getElementById("toggle-navigation-menu");
			let menuOpen = false;

			function toggleMobileMenu() {
				const headerEl = document.getElementById("main-header")!;
				headerEl.classList.toggle("menu-open");
				menuOpen = !menuOpen;
				mobileButtonEl.setAttribute("aria-expanded", menuOpen.toString());
			}

			mobileButtonEl.addEventListener("click", () => toggleMobileMenu());
		}
	}

	customElements.define("mobile-button", MobileNavBtn);

	document.addEventListener("DOMContentLoaded", function () {
		var toggleButton = document.getElementById("toggle-navigation-menu");

		document.addEventListener("click", function (event) {
			var navMenu = document.getElementById("navigation-menu");
			var mainHeader = document.getElementById("main-header");

			// Check if the click is on the toggle button or a descendant of it
			var isClickInsideToggleButton = toggleButton.contains(event.target);

			if (!isClickInsideToggleButton && event.target instanceof Node) {
				var isClickInsideNav = navMenu.contains(event.target);

				if (!isClickInsideNav && mainHeader) {
					// If the click is outside the navMenu and mainHeader exists, remove 'menu-open' attribute
					mainHeader.classList.remove("menu-open");
					toggleButton.setAttribute("aria-expanded", "false");
				}
			}
		});
	});
</script>
