---
import { SOCIALS } from "@/constants";
import type { SocialLink } from "@/types";

const mapSocialLinks = (socialLinksObject: { [key: string]: string }): SocialLink[] => {
	return Object.entries(socialLinksObject)
		.filter(([key, value]) => value && value.trim() !== "") // Filter out empty values first
		.map(([key, value]): SocialLink => {
			if (key === "email") {
				return {
					name: key,
					friendlyName: key.charAt(0).toUpperCase() + key.slice(1),
					link: value.startsWith("mailto:") ? value.replace("mailto:", "") : value,
					isWebmention: true,
				};
			}

			// Handle Instagram username format
			let processedLink = value;
			if (key === "instagram" && value && !value.startsWith("http")) {
				processedLink = `https://instagram.com/${value}`;
			}


			return {
				name: key,
				friendlyName: key.charAt(0).toUpperCase() + key.slice(1),
				link: processedLink,
			};
		});
};

const socialLinks = mapSocialLinks(SOCIALS);

const allSocialLinks = socialLinks;
---

<script>
	function copyToClipboard(text) {
		navigator.clipboard
			.writeText(text)
			.then(() => {
				const toast = document.getElementById("toast");
				toast.classList.remove("opacity-0");
				toast.classList.add("opacity-100");
				setTimeout(() => {
					toast.classList.remove("opacity-100");
					toast.classList.add("opacity-0");
				}, 3000);
			})
			.catch((err) => {
				console.error("Could not copy text: ", err);
			});
	}

	function handleEmailClick(event, email) {
		event.preventDefault();
		copyToClipboard(email);
	}

	document.addEventListener("DOMContentLoaded", () => {
		const emailLinks = document.querySelectorAll(".email-link");
		emailLinks.forEach((link) => {
			link.addEventListener("click", (event) => {
				const email = link.getAttribute("data-email");
				handleEmailClick(event, email);
			});
		});
	});
</script>

{
	socialLinks && socialLinks.length > 0 && (
		<>
			{/* Regular footer version - hidden on larger screens */}
			<div class="print:hidden flex items-center gap-2 sm:hidden">
				<ul class="flex items-center gap-2 flex-wrap">
					{allSocialLinks.map(({ link, name, friendlyName, isWebmention }) => (
						<li class="border border-accent/30 rounded-full px-3 py-1 text-sm hover:bg-accent/10 transition-colors">
							{friendlyName === "Email" ? (
								<a
									class="email-link text-accent hover:text-accent/80 transition-colors"
									href="#"
									data-email={link}
									rel={`noopener noreferrer ${isWebmention ? "me authn" : ""}`}
								>
									<span class="whitespace-nowrap">▰ email</span>
								</a>
							) : friendlyName === "Newsletter" ? (
								<a
									class="text-accent hover:text-accent/80 transition-colors"
									href={link}
									target="_blank"
									rel="noopener noreferrer"
									onclick="window.open(this.href, 'newsletter', 'width=600,height=1100,scrollbars=yes,resizable=yes'); return false;"
								>
									<span class="whitespace-nowrap">☗ newsletter</span>
								</a>
							) : (
								<a
									class="text-accent hover:text-accent/80 transition-colors"
									href={link}
									target="_blank"
									rel={`noopener noreferrer ${isWebmention ? "me authn" : ""}`}
								>
									<span class="whitespace-nowrap">◗ instagram</span>
								</a>
							)}
						</li>
					))}
				</ul>
			</div>

			{/* Fixed floating version - only on larger screens */}
			<div class="hidden sm:block print:hidden fixed bottom-4 right-4 z-50 bg-white/90 backdrop-blur-sm border border-accent/20 p-3">
				<ul class="flex items-center gap-2 flex-wrap">
					{allSocialLinks.map(({ link, name, friendlyName, isWebmention }) => (
						<li class="border border-accent/30 rounded-full px-3 py-1 text-sm hover:bg-accent/10 transition-colors">
							{friendlyName === "Email" ? (
								<a
									class="email-link text-accent hover:text-accent/80 transition-colors"
									href="#"
									data-email={link}
									rel={`noopener noreferrer ${isWebmention ? "me authn" : ""}`}
								>
									<span class="whitespace-nowrap">▰ email</span>
								</a>
							) : friendlyName === "Newsletter" ? (
								<a
									class="text-accent hover:text-accent/80 transition-colors"
									href={link}
									target="_blank"
									rel="noopener noreferrer"
									onclick="window.open(this.href, 'newsletter', 'width=600,height=1100,scrollbars=yes,resizable=yes'); return false;"
								>
									<span class="whitespace-nowrap">☗ newsletter</span>
								</a>
							) : (
								<a
									class="text-accent hover:text-accent/80 transition-colors"
									href={link}
									target="_blank"
									rel={`noopener noreferrer ${isWebmention ? "me authn" : ""}`}
								>
									<span class="whitespace-nowrap">◗ instagram</span>
								</a>
							)}
						</li>
					))}
				</ul>
			</div>
			<div
				id="toast"
				class="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded opacity-0 transition-opacity duration-300"
			>
				Email copied to clipboard!
			</div>
			<div class="hidden print:block print:w-full">
				<hr class="mb-4" />
				<p class="text-left font-bold">Find me on:</p>
				<ul>
					{socialLinks.map(({ link, name, friendlyName, isWebmention }) => (
						<li class="flex">
							<p class="text-left">
								{friendlyName}: {link}
							</p>
						</li>
					))}
				</ul>
			</div>
		</>
	)
}
