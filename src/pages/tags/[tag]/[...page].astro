---
import type { Page, GetStaticPaths } from "astro";
// import type { CollectionEntry } from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import PostPreviewFull from "@/components/blog/PostPreviewFull.astro";
import Pagination from "@/components/Paginator.astro";
import { getAllPosts, getAllTagsWithCounts } from "@/lib/notion/client";
import type { Post } from "@/lib/interfaces";
import { slugify } from "@/utils";
import { HIDE_UNDERSCORE_SLUGS_IN_LISTS, NUMBER_OF_POSTS_PER_PAGE, LAST_BUILD_TIME } from "@/constants";
import { getNavLink, getReferencesInPage, resetCurrentHeadings, resetFirstImage } from "@/lib/blog-helpers";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import Icon from "@/components/Icon.astro";

export const getStaticPaths = (async ({ paginate }) => {
	let posts = await getAllPosts();
	if (HIDE_UNDERSCORE_SLUGS_IN_LISTS) {
		posts = posts.filter((post) => !post.Slug.startsWith("_"));
	}

	const tags = await getAllTagsWithCounts();

	return tags.flatMap((tag) => {
		// Initially filter posts based on the collection
		let tagPosts = posts.filter((post) => post.Tags.some((postTag) => postTag.name === tag.name));

		// Sort posts to have pinned ones on top while maintaining the original order within each category
		tagPosts.sort((a, b) => {
			if (a.Pinned === b.Pinned) {
				return 0; // maintain original order if both are pinned or both are not pinned
			}
			return a.Pinned ? -1 : 1; // pinned posts come first
		});

		return paginate(tagPosts, {
			params: { tag: slugify(tag.name) },
			props: {
				tag: tag.name,
				description: tag.description,
				color: tag.color,
				count: tag.count,
			},
			pageSize: NUMBER_OF_POSTS_PER_PAGE,
		});
	});
}) satisfies GetStaticPaths;

interface Props {
	page: Page<Post>;
	tag: string;
	description: string;
	color: string;
	count: number;
}

const { page, tag, description, color, count } = Astro.props as Props;

// Compute caching info for each post in page.data
const allPosts = await getAllPosts();
const allPostsMap: Record<string, Post> = Object.fromEntries(allPosts.map(p => [p.PageId, p]));

const postsWithCacheInfo = page.data.map(post => {
	const referencesInPage = getReferencesInPage(post.PageId);
	const linkedPageIdsSet = new Set<string>();

	if (referencesInPage) {
		referencesInPage.forEach(ref => {
			if (ref.link_to_pageid) {
				linkedPageIdsSet.add(ref.link_to_pageid);
			}
			if (ref.other_pages) {
				ref.other_pages.forEach(richText => {
					if (richText.InternalHref?.PageId) {
						linkedPageIdsSet.add(richText.InternalHref.PageId);
					} else if (richText.Mention?.Page?.PageId) {
						linkedPageIdsSet.add(richText.Mention.Page.PageId);
					}
				});
			}
		});
	}

	const linkedPageIds = Array.from(linkedPageIdsSet);

	const postLastUpdatedBeforeLastBuild =
		LAST_BUILD_TIME && post?.LastUpdatedTimeStamp && post.LastUpdatedTimeStamp < LAST_BUILD_TIME;

	const linkedPostsUpdated =
		!LAST_BUILD_TIME ||
		(linkedPageIds.length > 0 && linkedPageIds.some(pageId => {
			const linkedPost = allPostsMap[pageId];
			return linkedPost && linkedPost.LastUpdatedTimeStamp > LAST_BUILD_TIME;
		}));

	const shouldUseCache = postLastUpdatedBeforeLastBuild && !linkedPostsUpdated;

	return { post, shouldUseCache, postLastUpdatedBeforeLastBuild };
});

const meta = {
	title: `Tag: ${tag}`,
	description: description || `View all posts with the tag - ${tag}`,
	ogImage: "/og-image/tagpage---" + tag + ".png",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			url: getNavLink(page.url.prev),
			text: `← Previous Tags`,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			url: getNavLink(page.url.next),
			text: `Next Tags →`,
		},
	}),
};
---

<PageLayout meta={meta}>
	<h1 class="title mb-6 flex max-w-full items-center">
		<span
			class={`flex items-center gap-2 rounded-lg px-2 py-1 ${getNotionColorToTailwindColor(color + "-background", true)} `}
			><Icon class="inline h-6 w-6" name={"tag-outline"} aria-hidden="true" focusable="false" />
			{tag}
			<span class="ml-2 rounded-sm bg-gray-100 px-2 text-base text-rose-800 dark:bg-gray-800 dark:text-rose-300">
				{count}
			</span>
		</span>
	</h1>
	{description && <q class="-mt-3 mb-6 block italic">{description}</q>}

	<section aria-label="Blog post list">
		<div class="full-content-feed space-y-0">
			{
				resetFirstImage() && postsWithCacheInfo.map(({ post, shouldUseCache, postLastUpdatedBeforeLastBuild }, index) => {
					resetCurrentHeadings();
					return (
						<div class={`${index !== postsWithCacheInfo.length - 1 ? 'border-b border-slate-300 pb-4 mb-4' : ''}`}>
							<PostPreviewFull
								post_full_preview={post}
								shouldUseCache={shouldUseCache}
								postLastUpdatedBeforeLastBuild={postLastUpdatedBeforeLastBuild}
								as="h2"
								withDesc
							/>
						</div>
					);
				})
			}
		</div>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>
